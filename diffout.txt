diff --git a/package-lock.json b/package-lock.json
index d95c897..e9276d6 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -3024,6 +3024,11 @@
         "event-emitter": "0.3.5"
       }
     },
+    "es6-object-assign": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/es6-object-assign/-/es6-object-assign-1.1.0.tgz",
+      "integrity": "sha1-wsNYJlYkfDnqEHyx5mUrb58kUjw="
+    },
     "es6-set": {
       "version": "0.1.5",
       "resolved": "https://registry.npmjs.org/es6-set/-/es6-set-0.1.5.tgz",
@@ -9667,6 +9672,11 @@
       "resolved": "https://registry.npmjs.org/promise-inflight/-/promise-inflight-1.0.1.tgz",
       "integrity": "sha1-mEcocL8igTL8vdhoEputEsPAKeM="
     },
+    "promise-polyfill": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/promise-polyfill/-/promise-polyfill-6.1.0.tgz",
+      "integrity": "sha1-36lpQ+qcEh/KTem1hoyznTRy4Fc="
+    },
     "protractor": {
       "version": "5.1.2",
       "resolved": "https://registry.npmjs.org/protractor/-/protractor-5.1.2.tgz",
@@ -11489,6 +11499,15 @@
         "whet.extend": "0.9.9"
       }
     },
+    "sweetalert": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/sweetalert/-/sweetalert-2.1.0.tgz",
+      "integrity": "sha512-9YKj0SvjKyBfRWco50UOsIbXVeifYbxzT9Qda7EsqC01eafHGCSG0IR7g942ufjzt7lnwO8ZZBwr6emXv2fQrg==",
+      "requires": {
+        "es6-object-assign": "1.1.0",
+        "promise-polyfill": "6.1.0"
+      }
+    },
     "symbol-observable": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/symbol-observable/-/symbol-observable-1.0.1.tgz",
diff --git a/package.json b/package.json
index 260734f..cccb88e 100644
--- a/package.json
+++ b/package.json
@@ -42,6 +42,7 @@
     "postcss-merge-rules": "~2.1.2",
     "rxjs": "^5.5.6",
     "schematics": "^0.2.0",
+    "sweetalert": "^2.1.0",
     "typescript": "~2.5.3",
     "webrtc-adapter": "^6.1.0",
     "zone.js": "^0.8.19"
diff --git a/src/assets/js/porchwire.js b/src/assets/js/porchwire.js
index b31f391..6e937f9 100644
--- a/src/assets/js/porchwire.js
+++ b/src/assets/js/porchwire.js
@@ -101,7 +101,6 @@ window.onload = function() {
         setTimeout(getAllOnline, 15000);
     }
 
-    
 
     /* Global Audio Values */
     let AUDIO_STREAM;
@@ -150,6 +149,15 @@ window.onload = function() {
     // Wrapper where new recording elements get appended
     let recording_session_files = byId('recording-session-files');
 
+
+    // Peer connection state and messaging utilities
+    let PeerState = {
+        sent_invite_and_waiting: false,
+        received_invite_and_waiting: false
+    }
+
+    let SENT_INVITE = false;
+
     // PWAudio - Audio Controls Methods and UI helpers
     let PWAudio = {
 
@@ -371,63 +379,65 @@ window.onload = function() {
         conversation.scrollTop = conversation.scrollHeight;
     }
 
-    // User clicked Connect to initiate a call. Creates a peer to peer
+    // User clicked Jam to initiate a call. Creates a peer to peer
     // data connection, and the call newJam to initiate media audio streams.
-    function newConnection() {
+    async function newConnection(otherPeer) {
 
-        var ID = byId('connect-to').value;
+        // Initial connection sends or accepts invite
+        let ID = otherPeer;
+        let conn = peer.connect(ID, { reliable: true });
 
-        var conn = peer.connect(ID, { reliable: true });
+        // Alert user on connection error
+        conn.on('error', function() {
+            swal('Sorry, there was a problem establishing th connection to ' + ID);
+        });
 
         // Data channel connection
         conn.on('open', function() {
-
-            // Receive messages
-            conn.on('data', function(data) {
-                addChatMsg(data);
-            });
-
-            // Send messages
-            let init_msg = 'Connection established with ' + peer.id;
-            conn.send(init_msg);
-
+            if (SENT_INVITE) {
+                let invite_msg = 'PWINVITE, ' + peer.id + ' invited you to jam';
+                conn.send(invite_msg);
+                newJam('call');
+            }
         });
 
-        newJam();
-
         return conn;
 
     }
 
     // Setup and define media stream on peer.all and peer.answer,
     // called above in newConnecton.
-    function newJam() {
+    async function newJam(mode) {
 
-        navigator.mediaDevices.getUserMedia({video: false, audio: true})
-       .then(function(stream) {
-        
-        // CALL
-            var ID = byId('connect-to').value;
-            var call = peer.call(ID, stream);
+        if (mode === 'call') {
 
-            call.on('stream', function(remoteStream) {
 
-                ACTIVE_LOCAL_STREAM = stream;
-                ACTIVE_REMOTE_STREAM = remoteStream;
+            navigator.mediaDevices.getUserMedia({video: false, audio: true})
+           .then(function(stream) {
+            
+            // CALL
+                let ID = byId('connect-to').value;
+                let call = peer.call(ID, stream);
 
-                AUDIO_STREAM = remoteStream; // TODO: bug, or really don't need this
-                PWAudio.streamAudio(remoteStream);
+                call.on('stream', function(remoteStream) {
 
-                launchStreamMeters(stream, local_meter, 'local');
-                launchStreamMeters(remoteStream, remote_meter, 'remote');
+                    ACTIVE_LOCAL_STREAM = stream;
+                    ACTIVE_REMOTE_STREAM = remoteStream;
 
-                audio_wrapper.className = "d-block";
-            });
+                    AUDIO_STREAM = remoteStream;
+                    PWAudio.streamAudio(remoteStream);
 
-        })
-       .catch(function(err) {
-            console.log('Failed to get local stream', err);
-        });
+                    launchStreamMeters(stream, local_meter, 'local');
+                    launchStreamMeters(remoteStream, remote_meter, 'remote');
+
+                    audio_wrapper.className = "d-block";
+                });
+
+            })
+           .catch(function(err) {
+                console.log('Failed to get local stream', err);
+            });
+        }
 
         // ANSWER
         peer.on('call', function(call) {
@@ -442,9 +452,8 @@ window.onload = function() {
                     ACTIVE_LOCAL_STREAM = stream;
                     ACTIVE_REMOTE_STREAM = remoteStream;
 
-                    AUDIO_STREAM = remoteStream; // TODO: bug, or really don't need this
+                    AUDIO_STREAM = remoteStream;
                     PWAudio.streamAudio(remoteStream);
-
                     
                     launchStreamMeters(stream, local_meter, 'local');
                     launchStreamMeters(remoteStream, remote_meter, 'remote');
@@ -482,30 +491,56 @@ window.onload = function() {
         window.peerUser = peer;
 
         peer.on('open', function(id) {
-
             ngPeer.innerText = id;
-            console.log('Your peer ID is: ' + id);
-
-            // Init async socket ping
-            porchPing();
+            porchPing(); // Init async socket ping
         });
 
         peer.on('connection', function(conn) {
+            conn.on('data', function(data) {
 
-            conn.on('data', function(data){
-                addChatMsg(data);
+                // data is an invite message
+                if (data.indexOf('PWINVITE') > -1) {
+
+                    let invite = data.split('PWINVITE, ')[1];
+                    let invitedBy = invite.split(' invited you to jam')[0];
+
+                    console.log('invitedBy = ' + invitedBy);
+
+                    swal({
+                        title: "Jam Time?",
+                        text: invite,
+                        buttons: true
+                    })
+                    .then(function(accepted) {
+                        console.log('accepted = ' + accepted);
+                        if (accepted) {
+                            connected = newConnection(invitedBy); // Calls this function on the remote client
+                            conn.send('Invite accepted! Jam should be starting...');
+                            newJam('');
+                        }
+                        else {
+                            conn.send(peer.id + " can't jam right now.'");
+                            conn.close();
+                        }
+                    });
+                }
+                // data is an invite response
+                else if (data.indexOf('Invite accepted!') > -1) {
+                    addChatMsg(data);
+                }
+                // Normal message, invite comfirmation already established
+                else {
+                    addChatMsg(data);
+                }
             });
-
+            
         });
 
         peer.on('disconnected', function(id) {
             while (reconnect_try_count < 5) {
-                console.log('lost connection, attempting to reconnect');
 
                 if (peer.reconnect()) {
-
                     reconnect_try_count = 0;
-                    console.log('Reconnected: ID: ' + id);
                 }
                 else {
                     reconnect_try_count++;
@@ -513,6 +548,12 @@ window.onload = function() {
             }
         });
 
+        // Alert user of the error message
+        // TODO: map error messages to porchwire specific messages
+        peer.on('error', function(err) {
+            swal('Woa! Sorry, an error occurred. MESSAGE: ' + err);
+        });
+
         return peer;
 
     } // end initPeer
@@ -522,7 +563,13 @@ window.onload = function() {
     // UI listeners    
 
     connect_jam.addEventListener('click', function() {
-        connected = newConnection();
+        
+        let jamWith = byId('connect-to').value;
+        
+        SENT_INVITE = true;
+
+        connected = newConnection(jamWith);
+
     }, false);
 
     send_button.addEventListener('click', function() {
diff --git a/src/index.html b/src/index.html
index 96b538d..df3fc45 100644
--- a/src/index.html
+++ b/src/index.html
@@ -22,6 +22,9 @@
     <!-- webrtc-adapter -->
     <script src="./assets/js/adapter6-1.js"></script>
 
+    <!-- sweet alert -->
+    <script src="./assets/js/sweetalert.min.js"></script>
+    
     <!-- Porchwire -->
     <script src="./assets/js/PW.js"></script>
     <script src="./assets/js/porchwire.js"></script>
